name: Continuous Integration
run-name: ${{ github.actor }} is testing out GitHub Actions ðŸš€
on: [push]
jobs:
  compile:
    runs-on: ubuntu-latest
    steps:
      - name: Cache Node Modules
        id: cache
        uses: actions/cache@v3
        with:
            path: node_modules
            key: node_modules-cache
      - name: Checkout
        uses: actions/checkout@v1
      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: 16.x
      - name: Install Deps
        run: cd backend && npm i
      - name: Build
        run: cd backend && npm run build
      - name: Generate Artifact
        run: cd backend/build && zip -r artifact.zip ./ -X '*.git*'
      - name: Store Artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-artifact
          path: backend/build/
  lint:
    needs: [compile]
    runs-on: ubuntu-latest
    steps:
        - name: Checkout
          uses: actions/checkout@v1
        - name: Cache Node Modules
          id: cache-node-modules
          uses: actions/cache@v3
          with:
            path: node_modules
            key: node_modules-cache
        - name: Install Dependencies
          if: steps.cache-node-modules.outputs.cache-hit != 'true'
          run: cd backend && npm i
        - name: Lint the code
          run: cd backend && npm run lint
  test:
    needs: [compile]
    runs-on: ubuntu-latest
    steps:
        - name: Checkout
          uses: actions/checkout@v1
        - name: Cache Node Modules
          id: cache-node-modules
          uses: actions/cache@v3
          with:
            path: node_modules
            key: node_modules-cache
        - name: Install Dependencies
          if: steps.cache-node-modules.outputs.cache-hit != 'true'
          run: cd backend && npm i
        - name: Run Unit Tests
          run: cd backend && npm t

  static-analysis:
    needs: [compile]
    runs-on: ubuntu-latest
    permissions:
        security-events: write
    steps:
        - uses: actions/checkout@v1
        # - name: Initialize CodeQL
        #   uses: github/codeql-action/init@v2
        #   with:
        #     languages: javascript
        # - name: Setup Node
        #   uses: actions/setup-node@v1
        #   with:
        #     node-version: 16.x
        # - name: Install Dependencies
        #   run: cd backend && npm i
        # - name: Perform Analysis
        #   uses: github/codeql-action/analyze@v2

  security-audit:
    needs: [compile]
    runs-on: ubuntu-latest
    steps:
        - name: Checkout
          uses: actions/checkout@v1
        - name: Check for security issue
          run: cd backend && npm audit --audit-level=medium

  deploy_to_eb:
    # if: github.ref == 'refs/heads/main'
    needs: [static-analysis, security-audit, lint, test]
    runs-on: ubuntu-latest
    outputs:
        url: ${{ steps.deploy.outputs.page_url }}
    steps:
        - name: Get Artifact
          uses: actions/download-artifact@v4
          with: 
            name: backend-artifact
            path: backend/build
        - name: Prepare ProcFile
          run: |
            echo "web: node server.js" > backend/build/Procfile
        - name: Prepare Zipi file
          run: cd backend/build && ls && zip -r artifact.zip  ./ -X '*.git*'
        - name: Deploy to Elastic Beanstalk
          id: deployment
          uses: einaregilsson/beanstalk-deploy@v20
          with:
            aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            application_name: "AnyHasher"
            environment_name: "AnyHasher-env"
            version_label: "v-${{ github.run_number }}"
            region: "ap-south-1"
            deployment_package: "backend/build/artifact.zip"

  verify-production:
    runs-on: ubuntu-latest
    needs: [deploy_to_eb]
    steps:
        - name: Checkout
          uses: actions/checkout@v1
        - name: Run Smoke Test
          run: |
            export BACKEND_URL=http://anyhasher-env.eba-ahbkb527.ap-south-1.elasticbeanstalk.com/
            cd backend/e2e
            chmod +x backend-smoke.sh
            ./backend-smoke.sh